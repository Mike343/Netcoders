@model Coders.Web.Models.Users.UserAdminUpdate
@section scripts
{
	<script src="/content/scripts/jquery-ui-1.8.custom.min.js" type="text/javascript"></script>
    <script src="/content/scripts/coders.form.js" type="text/javascript"></script>
}
@section location
{
	<div id="location">
		<ul>
			<li class="first">@Url.Route(AdministrationRoutes.HomeIndex).Link(Resources.Titles.Administration)</li>
			<li>@Url.Route(UsersAdministrationRoutes.HomeIndex, new { sort = "name", order = "ascending", page = 1 }).Link(Resources.Titles.Users)</li>
			<li class="last">@Resources.Titles.UpdateWith.FormatInvariant(Resources.Titles.User)</li>
		</ul>
	</div>
}
<div class="title">
	<h5>@Resources.Titles.UpdateWith.FormatInvariant(Resources.Titles.User)</h5>
	<ul>
		<li><a href="@Url.Route(UsersAdministrationRoutes.RolePrivilege, new { id = Model.Id }).Value"><span>@Resources.Titles.Permissions</span></a></li>
		<li><a href="@Url.Route(UsersAdministrationRoutes.HomeReset, new { id = Model.Id }).Value"><span>@Resources.Titles.ResetPassword</span></a></li>
		<li class="last"><a href="@Url.Route(UsersAdministrationRoutes.HomeHistory).Value"><span>@Resources.Titles.History</span></a></li>
	</ul>
</div>
<div class="content">
	@{Html.Message(Model);}
	@{Html.ValidationResult();}
	@{Html.BeginRouteForm(UsersAdministrationRoutes.HomeUpdate);}
	<div class="form">
		<div class="fields">
			<div class="field field-first">
				<div class="label">
					<label for="Name">@Resources.Titles.Name:</label>
				</div>
				<div class="input">
					@Html.TextBoxFor(x => x.Name, new { @class = "medium" })
					@Html.ValidationMessageFor(x => x.Name)
				</div>
			</div>
			<div class="field">
				<div class="label">
					<label for="Title">@Resources.Titles.Title:</label>
				</div>
				<div class="input">
					@Html.TextBoxFor(x => x.Title, new { @class = "medium" })
					@Html.ValidationMessageFor(x => x.Title)
				</div>
			</div>
			<div class="field">
				<div class="label">
					<label for="EmailAddress">@Resources.Titles.EmailAddress:</label>
				</div>
				<div class="input">
					@Html.TextBoxFor(x => x.EmailAddress, new { @class = "medium" })
					@Html.ValidationMessageFor(x => x.EmailAddress)
				</div>
			</div>
			<div class="field">
				<div class="label">
					<label for="VerifyEmailAddress">@Resources.Titles.VerifyWith.FormatInvariant(Resources.Titles.EmailAddress):</label>
				</div>
				<div class="input">
					@Html.TextBoxFor(x => x.VerifyEmailAddress, new { @class = "medium" })
					@Html.ValidationMessageFor(x => x.VerifyEmailAddress)
				</div>
			</div>
			<div class="field">
				<div class="label">
					<label for="Password">@Resources.Titles.Password:</label>
				</div>
				<div class="input">
					@Html.TextBoxFor(x => x.Password, new { @class = "medium" })
					@Html.ValidationMessageFor(x => x.Password)
				</div>
			</div>
			<div class="field">
				<div class="label">
					<label for="VerifyPassword">@Resources.Titles.VerifyWith.FormatInvariant(Resources.Titles.Password):</label>
				</div>
				<div class="input">
					@Html.TextBoxFor(x => x.VerifyPassword, new { @class = "medium" })
					@Html.ValidationMessageFor(x => x.VerifyPassword)
				</div>
			</div>
			@if (User.IsSuper()) {
				<div class="field field-check">
					<div class="label">
						<label for="IsProtected">@Resources.Titles.Protected:</label>
					</div>
					<div class="check">
						@Html.CheckBoxFor(x => x.IsProtected)
					</div>
				</div>
			}
			<div class="field">
				<div class="label">
					<label for="Status">@Resources.Titles.Status:</label>
				</div>
				<div class="select">
					@Html.DropDownListFor(x => x.Status, Model.Statuses.SelectList(), new { @class = "normal" })
				</div>
			</div>
			<div class="field">
				<div class="label">
					<label for="CountryId">@Resources.Titles.Country:</label>
				</div>
				<div class="select">
					@Html.DropDownListFor(x => x.CountryId, Model.Countries.SelectList(x => x.Id, x => x.Title), new { @class = "countries" })
				</div>
			</div>
			<div class="field">
				<div class="label">
					<label for="TimeZoneId">@Resources.Titles.TimeZone:</label>
				</div>
				<div class="select">
					@Html.DropDownListFor(x => x.TimeZoneId, Model.TimeZones.SelectList(x => x.Id, x => x.Display), new { @class = "timezones" })
				</div>
			</div>
			<div class="field">
				<div class="label">
					<label for="Dst">@Resources.Titles.DaylightSavingTime:</label>
				</div>
				<div class="select">
					@Html.DropDownListFor(x => x.Dst, Model.Dsts.SelectList(), new { @class = "normal" })
				</div>
			</div>
			<div class="field">
				<div class="label">
					<label for="StartOfWeek">@Resources.Titles.StartOfTheWeek:</label>
				</div>
				<div class="select">
					@Html.DropDownListFor(x => x.StartOfWeek, Model.StartOfWeeks.SelectList(), new { @class = "normal" })
				</div>
			</div>
			<div class="field">
				<div class="label">
					<label for="imeFormat">@Resources.Titles.TimeFormat:</label>
				</div>
				<div class="select">
					@Html.DropDownListFor(x => x.TimeFormat, Model.TimeFormats.SelectList(), new { @class = "normal" })
				</div>
			</div>
			<div class="field">
				<div class="label">
					<label for="Signature">@Resources.Titles.Signature:</label>
				</div>
				<div class="textarea">
					@Html.TextAreaFor(x => x.Signature, 8, 80, null)
					@Html.ValidationMessageFor(x => x.Signature)
				</div>
			</div>
			<div class="buttons">
				@Html.HiddenFor(x => x.Id)
				@Html.HiddenFor(x => x.CurrentName)
				@Html.HiddenFor(x => x.CurrentEmailAddress)
				@Html.AntiForgeryToken()
				<input type="submit" value="@Resources.Titles.Submit" />
				<input type="reset" value="@Resources.Titles.Reset" />
			</div>
		</div>
	</div>
	@{Html.EndForm();}
</div>